<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Lane's Blog]]></title>
  <link href="http://chenlu0201.github.io/atom.xml" rel="self"/>
  <link href="http://chenlu0201.github.io/"/>
  <updated>2015-01-26T00:45:28+08:00</updated>
  <id>http://chenlu0201.github.io/</id>
  <author>
    <name><![CDATA[Chen Lu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Git中的存储对象]]></title>
    <link href="http://chenlu0201.github.io/blog/2015/01/25/objects-in-git/"/>
    <updated>2015-01-25T14:49:06+08:00</updated>
    <id>http://chenlu0201.github.io/blog/2015/01/25/objects-in-git</id>
    <content type="html"><![CDATA[<p>2005年，由于linux内核开发团队当时使用的BitKeeper VCS不能满足需要，Linus希望找到一个VCS能满足足以下需求：</p>

<ul>
<li>Facilitate Distributed Development</li>
<li>Scale to Handle Thousands of Developers</li>
<li>Perform Quickly and Eficiently</li>
<li>Maintain Integrity and Trust</li>
<li>Enforce Accoutablility</li>
<li>Immutability</li>
<li>Atomic Transactions</li>
<li>Support and Encourage Branched Development</li>
<li>Complete Repositories</li>
<li>A Clean Internal Design</li>
<li>Be Free</li>
</ul>


<p>遗憾找不到合适可用的VCS。最后开发团队决定开发自己的VCS系统，也就是后来的Git。 本篇接下来将介绍使Git具有以上特性的基础 &ndash; Git的存储对象模型。</p>

<h2>Git仓库（Git Repository）</h2>

<p>Git仓库是一个记录和管理工程版本和历史的数据仓库。Git与其它VCSs的区别在于它不仅有工作目录所有内容的拷贝，还有使Git工作的仓库拷贝。同时还对每个站点，每个用户，每个仓库维护了一组配置信息。Git仓库维护了两种基础的数据结构：对象存储和索引，所有的文件都存储在工作目录的跟路径的.git目录下。Git的对象存储经过了精心的设计，能支持分布式的高效拷贝；Git索引用来存储每个本地仓库自己的临时数据，可以根据用户的需要灵活的更改。</p>

<h2>Git对象类型</h2>

<ul>
<li>Blobs</li>
</ul>


<p>一个Blob对象代表了一个文件某个版本的内容。在计算中，我们需要引用到一些变量和文件，但是又不关心内部的具体数据时，我们经常用<code>Blob</code>[binary large object]来存储数据。Blob数据只存储文件的内容，而不存储任何文件相关的元数据，包括文件名。</p>

<ul>
<li>Trees</li>
</ul>


<p>一个Tree对象代表了一层目录的信息。它记录了blob对象的标识，路径名和当前目录的一些元数据。它同时可以递归的应用其他的Subtree对象。因此它维护了完成的文件和路径的完整结构。</p>

<ul>
<li>Commits</li>
</ul>


<p>一个Commit对象存储了对仓库引入的一次修改的元数据，它包括作者，提交人，提交日期，日志信息。每个Commit对象指向了包含工作仓库最新状态完整快照的Tree对象。最初的提交没有父节点，大部分提交都有一个父节点，也有存在两个父节点的情况（比如在merge的情况下）。</p>

<ul>
<li>Tags</li>
</ul>


<p>一个Tag用来给其它对象指定一个可读的名字，通常是一个Commit。虽然<code>9da581ae67f765c8aac675de87f54a3c5ef6da</code>引用了一个具体的Commit,使用一个更可读的Tag,例如Ver-1.0-Alpha，会更方便。</p>

<h2>Index</h2>

<p>Index是用来描述整个仓库目录结构的，临时、动态的二进制文件。更具体一点讲，Index包含某一时刻整个工程全部结构。整个工程的状态可以由工程历史中任意时间的一个Commit对象和一个Tree对象来获取。GIt区别于其它VCS的一个核心特性是它提供了设计良好的方法来修改Index。Index同时能将增量开发和提交的内容区分开来。一般，开发人员会频繁的修改、删除、回退文件，Index用户记录那些已经修改完毕，并可以用于提交的内容，同时也可以从Index中取消修改。被Index记录的文件，才会被提交到远程仓库。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Octopress创建个人blog]]></title>
    <link href="http://chenlu0201.github.io/blog/2015/01/18/create-blog-with-octopress/"/>
    <updated>2015-01-18T13:02:35+08:00</updated>
    <id>http://chenlu0201.github.io/blog/2015/01/18/create-blog-with-octopress</id>
    <content type="html"><![CDATA[<p><a href="http://octopress.org/">Octopress</a>是基于Jekyll的静态博客引擎，并支持将博客发布到<a href="https://pages.github.com/">Github Pages</a>, Heroku和Rsync. 本文将指导大家使用Octopress搭建属于你自己的博客系统，并发布到<a href="https://pages.github.com/">Github Pages</a>上。</p>

<h2>环境设置</h2>

<ol>
<li>安装<a href="http://http://git-scm.com/">Git</a></li>
<li>安装Ruby 1.9.3或者更高版本。可以使用<a href="http://octopress.org/docs/setup/rbenv/">rbenv</a>或者<a href="http://http://octopress.org/docs/setup/rvm/">RVM</a>安装ruby。如果<code>ruby --verion</code>显示你的版本不是或者高于1.9.2，请参考使用<a href="http://octopress.org/docs/setup/rbenv/">rbenv</a>或者<a href="http://http://octopress.org/docs/setup/rvm/">RVM</a>安装Ruby</li>
<li>下载Octopress</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone git://github.com/imathis/octopress.git octopress
</span><span class='line'>cd octopress</span></code></pre></td></tr></table></div></figure>


<p>然后，安装依赖</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem install bundler
</span><span class='line'>rbenv rehash    # If you use rbenv, rehash to be able to run the bundle command
</span><span class='line'>bundle install</span></code></pre></td></tr></table></div></figure>


<p>安装默认的主题</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake install</span></code></pre></td></tr></table></div></figure>


<h2>部署blog到Github pages上</h2>

<p>这里将使用Github User/Organization pages来部署blog. 首先创建一个新的Github仓库，仓库的命名格式是<code>username.github.io</code>。<code>username</code>是你的Github账户名。创建好仓库后，我们在上面克隆的octopress目录下执行</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake setup_github_pages</span></code></pre></td></tr></table></div></figure>


<p>这个任务将提示你输入刚才的仓库地址。它帮你完成了以下工作：</p>

<ol>
<li>提示用户输入并存储远程仓库路径。</li>
<li>将本地仓库的git remote做调整，imathis/octopress将有origin变为octopress.</li>
<li>将输入的仓库地址设置为defalut origin remote.</li>
<li>将本地分支从master切换到source上。</li>
<li>根据仓库地址配置blog url。</li>
<li>在_deploy目录下配置部署用的master分支。</li>
</ol>


<p>接下来执行</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake generate
</span><span class='line'>rake deploy</span></code></pre></td></tr></table></div></figure>


<p>将为你生成blog的静态页面，并拷贝到_deploy目录下， 同时部署到仓库的master分支上。当提交完你的blog site后， 请不要忘记将blog的源码提交到仓库，做好备份。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git add .
</span><span class='line'>git commit -m "your message"
</span><span class='line'>git push origin source</span></code></pre></td></tr></table></div></figure>


<h2>写一篇新博客</h2>

<p>octopress提供了一个rake task为你按照约定的命名规则创建一篇blog post.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake new_post["title"]</span></code></pre></td></tr></table></div></figure>


<p><code>new_post</code>需要指定post的标题，缺省的post模板类型是<code>markdown</code>.</p>

<p><strong>Example:</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake new_post["my new post"]
</span><span class='line'># Creates source/_posts/2015-01-18-my-new-post.markdown</span></code></pre></td></tr></table></div></figure>


<p>如果你已经编辑好了你的post，接下来执行rake generate; rake deploy之后，访问<code>https://username.github.io</code>,你将看到自己的blog主页。
到此，你就掌握了怎样使用octopress搭建自己的blog系统。 当然让后续还有很多工作要做，比如配置个性化的域名，设计个性化的主题，为blog添加评论系统等。后续将逐渐补充。</p>

<p>更多详细内容，请参考<a href="http://octopress.org/">Octopress</a>主页。</p>
]]></content>
  </entry>
  
</feed>
